{"remainingRequest":"E:\\疫情防控\\vue_epidemic\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\疫情防控\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\疫情防控\\vue_epidemic\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\疫情防控\\vue_epidemic\\src\\components\\menu\\Admin.vue?vue&type=template&id=39c9bde2&scoped=true&","dependencies":[{"path":"E:\\疫情防控\\vue_epidemic\\src\\components\\menu\\Admin.vue","mtime":1620538518000},{"path":"E:\\疫情防控\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\疫情防控\\vue_epidemic\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\疫情防控\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\疫情防控\\vue_epidemic\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}