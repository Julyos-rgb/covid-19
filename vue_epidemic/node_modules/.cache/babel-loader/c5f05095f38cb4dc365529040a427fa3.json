{"remainingRequest":"E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\thread-loader\\dist\\cjs.js!E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\babel-loader\\lib\\index.js!E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\疫情防控管理系统\\vue_epidemic\\src\\components\\main\\noticeSend.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\疫情防控管理系统\\vue_epidemic\\src\\components\\main\\noticeSend.vue","mtime":1620538518000},{"path":"E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\疫情防控管理系统\\vue_epidemic\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}